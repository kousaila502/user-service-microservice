openapi: 3.0.3
info:
  title: User Service API - Live System Integration
  description: |
    E-commerce User Management Service with comprehensive live system integration

    ## üåê Live System Architecture
    This User Service integrates with a multi-cloud microservices ecosystem:

    ### Frontend & Gateway
    - **Frontend**: Vercel - https://ecommerce-app-omega-two-64.vercel.app
    - **API Gateway**: GKE Kubernetes - https://34.95.5.30.nip.io
    - **Controller**: Azure Container Instance

    ### External Services
    - **Cart Service**: Heroku Platform
    - **Product Service**: Heroku Platform  
    - **Order Service**: GKE Kubernetes
    - **Search Service**: Render Platform

    ### Data Layer
    - **Database**: Neon PostgreSQL (ep-cold-breeze-aedi5hre-pooler.c-2.us-east-2.aws.neon.tech)

    ## üîê Authentication
    This service uses JWT (JSON Web Tokens) for authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <jwt_token>
    ```

    ## üöÄ Deployment
    - **Platform**: Google Kubernetes Engine (GKE)
    - **GitOps**: Managed by ArgoCD

  version: 2.5.0-LIVE
  contact:
    name: E-Commerce Platform Team
    email: support@ecommerce-platform.com
    url: https://ecommerce-app-omega-two-64.vercel.app
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://34.95.5.30.nip.io/user
    description: Production API Gateway (GKE)
  - url: http://localhost:9090
    description: Local Development Server

tags:
  - name: Authentication
    description: User authentication and token management
  - name: User Management
    description: User profile and account operations
  - name: Admin Operations
    description: Administrative user management (admin only)
  - name: Password Management
    description: Password reset and change endpoints
  - name: Email Verification
    description: Email verification endpoints
  - name: Health Monitoring
    description: Service health and status endpoints
  - name: Validation
    description: User validation endpoints

paths:
  /:
    get:
      tags: [Health Monitoring]
      summary: Root endpoint with service overview
      description: Welcome endpoint with service overview and quick links
      responses:
        "200":
          description: Service overview
          content:
            application/json:
              example:
                message: "üöÄ E-Commerce User Service - Live System Integration"
                service: "user-service"
                version: "2.5.0-LIVE"
                platform: "GKE Kubernetes"
                database: "Neon PostgreSQL"
                status: "operational"
                live_system:
                  frontend: "https://ecommerce-app-omega-two-64.vercel.app"
                  api_gateway: "https://34.95.5.30.nip.io"
                quick_links:
                  documentation: "/docs"
                  health_check: "/health"
                  service_info: "/info"
                  swagger_yaml: "/swagger"

  /swagger:
    get:
      tags: [Health Monitoring]
      summary: Serve swagger.yaml file
      description: Returns the OpenAPI YAML specification for the User Service
      responses:
        "200":
          description: Swagger YAML file
          content:
            application/x-yaml:
              schema:
                type: string

  /health:
    get:
      tags: [Health Monitoring]
      summary: Comprehensive health check
      description: Returns the current health status of the User Service and database connectivity
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              example:
                status: "healthy"
                service: "user-service"
                version: "2.5.0-LIVE"
                timestamp: "2025-08-07T10:30:00.000Z"
                platform: "GKE Kubernetes"
                database:
                  provider: "Neon PostgreSQL"
                  status: "connected"
                  host: "ep-cold-breeze-aedi5hre-pooler.c-2.us-east-2.aws.neon.tech"
                  platform: "AWS us-east-2"
                features:
                  - "authentication"
                  - "user-management"
                  - "admin-dashboard"
                  - "password-reset"
                  - "email-verification"
                  - "jwt-authentication"
                  - "live-system-integration"
                  - "swagger-documentation"
                live_system:
                  frontend: "https://ecommerce-app-omega-two-64.vercel.app"
                  api_gateway: "https://34.95.5.30.nip.io"
                  controller: "http://techmart-controller.uksouth.azurecontainer.io:3000"
                cors_enabled: true
                cors_origins_count: 6
                documentation:
                  swagger_ui: "/docs"
                  redoc: "/redoc"
                  openapi_json: "/openapi.json"
                  swagger_yaml: "/swagger"

  /health/database:
    get:
      tags: [Health Monitoring]
      summary: Database-specific health check
      description: Returns detailed database connectivity status
      responses:
        "200":
          description: Database health status
          content:
            application/json:
              example:
                status: "connected"
                provider: "Neon PostgreSQL"
                host: "ep-cold-breeze-aedi5hre-pooler.c-2.us-east-2.aws.neon.tech"
                platform: "AWS us-east-2"
                timestamp: "2025-08-07T10:30:00.000Z"

  /info:
    get:
      tags: [Health Monitoring]
      summary: Detailed service information
      description: Returns comprehensive service configuration and system information
      responses:
        "200":
          description: Detailed service information
          content:
            application/json:
              example:
                service: "user-service"
                version: "2.5.0-LIVE"
                platform: "GKE Kubernetes"
                database: "Neon PostgreSQL"
                timestamp: "2025-08-07T10:30:00.000Z"
                live_system:
                  frontend: "https://ecommerce-app-omega-two-64.vercel.app"
                  api_gateway: "https://34.95.5.30.nip.io"
                  controller: "http://techmart-controller.uksouth.azurecontainer.io:3000"
                endpoints:
                  authentication:
                    register: "/auth/register"
                    login: "/auth/login"
                    refresh: "/auth/refresh"
                    logout: "/auth/logout"
                  user_management:
                    profile: "/users/profile"
                    update_profile: "/users/profile"
                    delete_account: "/users/delete"
                  password_management:
                    forgot_password: "/auth/forgot-password"
                    reset_password: "/auth/reset-password"
                    change_password: "/users/change-password"
                  email_verification:
                    verify_email: "/auth/verify-email"
                    resend_verification: "/auth/resend-verification"
                  admin:
                    users_list: "/admin/users"
                    user_details: "/admin/users/{user_id}"
                    activate_user: "/admin/users/{user_id}/activate"
                    deactivate_user: "/admin/users/{user_id}/deactivate"
                documentation:
                  swagger_ui: "/docs"
                  redoc: "/redoc"
                  openapi_json: "/openapi.json"
                  swagger_yaml: "/swagger"
                features:
                  - "JWT Authentication"
                  - "Password Reset via Email"
                  - "Email Verification"
                  - "User Profile Management"
                  - "Admin User Management"
                  - "Live System Integration"
                  - "Swagger Documentation"

  # Authentication Endpoints
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      description: Create a new user account in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
            examples:
              UserRegistration:
                value:
                  name: "Jane Smith"
                  email: "jane.smith@example.com"
                  mobile: "12345678"
                  password: "SecurePassword789"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/login:
    post:
      tags: [Authentication]
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
            examples:
              UserLogin:
                value:
                  email: "jane.smith@example.com"
                  password: "SecurePassword789"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Logout user
      description: Logout user and cleanup session
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              example:
                message: "Logout successful"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/me:
    get:
      tags: [Authentication]
      summary: Get current user profile
      description: Get the current user's profile information
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Password Management Endpoints
  /auth/forgot-password:
    post:
      tags: [Password Management]
      summary: Initiate password reset
      description: Send password reset email to user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
                  example: "jane.smith@example.com"
      responses:
        "200":
          description: Password reset email sent
          content:
            application/json:
              example:
                message: "Password reset email sent"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/reset-password:
    post:
      tags: [Password Management]
      summary: Complete password reset
      description: Reset password using token sent to email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, new_password]
              properties:
                token:
                  type: string
                  example: "reset-token-123"
                new_password:
                  type: string
                  minLength: 6
                  example: "NewSecurePassword456"
      responses:
        "200":
          description: Password reset successful
          content:
            application/json:
              example:
                message: "Password reset successful"
        "400":
          description: Invalid token or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/change-password:
    put:
      tags: [Password Management]
      summary: Change password for authenticated user
      description: Change the current user's password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [current_password, new_password]
              properties:
                current_password:
                  type: string
                  example: "OldPassword123"
                new_password:
                  type: string
                  minLength: 6
                  example: "NewSecurePassword456"
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              example:
                message: "Password changed successfully"
        "400":
          description: Invalid current password or new password requirements not met
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # Email Verification Endpoints
  /auth/verify-email:
    post:
      tags: [Email Verification]
      summary: Verify email with token
      description: Verify user's email address using token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token]
              properties:
                token:
                  type: string
                  example: "verification-token-123"
      responses:
        "200":
          description: Email verified successfully
          content:
            application/json:
              example:
                message: "Email verified successfully"
        "400":
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/resend-verification:
    post:
      tags: [Email Verification]
      summary: Resend verification email
      description: Resend the email verification link to the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  format: email
                  example: "jane.smith@example.com"
      responses:
        "200":
          description: Verification email resent
          content:
            application/json:
              example:
                message: "Verification email resent"
        "400":
          description: Invalid email
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # User Management Endpoints
  /users/profile:
    get:
      tags: [User Management]
      summary: Get user profile
      description: Get the current user's profile information
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      tags: [User Management]
      summary: Update user profile
      description: Update the current user's profile information
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "newemail@example.com"
                full_name:
                  type: string
                  example: "John Updated Doe"
                bio:
                  type: string
                  example: "Software Developer"
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Profile updated successfully"
                  user:
                    $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/users:
    get:
      tags:
        - Admin Operations
      summary: Get all users (Admin only)
      description: Retrieve a list of all users in the system (admin access required)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of users per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for username or email
      responses:
        "200":
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/UserResponse"
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 20
                      total:
                        type: integer
                        example: 150
                      pages:
                        type: integer
                        example: 8
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/users/{user_id}:
    get:
      tags:
        - Admin Operations
      summary: Get user by ID (Admin only)
      description: Retrieve detailed information about a specific user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        "200":
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      tags:
        - Admin Operations
      summary: Delete user (Admin only)
      description: Delete a user account from the system
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          description: User ID to delete
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted successfully"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/users/blocked:
    get:
      tags: [Admin Operations]
      summary: Get blocked users
      description: Retrieve a list of blocked users (admin only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Blocked users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserStatusResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/users/{user_id}/block:
    post:
      tags: [Admin Operations]
      summary: Block user
      description: Block a user with a reason (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlockUserRequest"
      responses:
        "200":
          description: User blocked successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStatusResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/users/{user_id}/unblock:
    post:
      tags: [Admin Operations]
      summary: Unblock user
      description: Unblock a user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User unblocked successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStatusResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/users/{user_id}/suspend:
    post:
      tags: [Admin Operations]
      summary: Suspend user
      description: Suspend a user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  example: "Violation of terms"
      responses:
        "200":
          description: User suspended successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStatusResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/users/{user_id}/role:
    put:
      tags: [Admin Operations]
      summary: Change user role
      description: Change the role of a user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
                  example: "admin"
      responses:
        "200":
          description: User role updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStatusResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/create-user:
    post:
      tags: [Admin Operations]
      summary: Admin create user
      description: Create a user with a specific role (admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AdminCreateUserRequest"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AdminCreateUserResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/stats:
    get:
      tags: [Admin Operations]
      summary: User statistics
      description: Get user statistics (admin only)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStatsResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/users/{user_id}/sessions:
    get:
      tags: [Admin Operations]
      summary: Get user sessions
      description: Get all sessions for a user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User sessions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    session_id:
                      type: string
                      example: "sess-123456"
                    created_at:
                      type: string
                      format: date-time
                      example: "2025-08-07T10:30:00.000Z"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /admin/users/{user_id}/logout-all:
    post:
      tags: [Admin Operations]
      summary: Force logout all sessions
      description: Force logout all sessions for a user (admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: All sessions logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "All sessions logged out successfully"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users:
    post:
      tags: [User Management]
      summary: Create user
      description: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags: [User Management]
      summary: Get all users
      description: Retrieve all users
      responses:
        "200":
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"

  /users/{user_id}:
    get:
      tags: [User Management]
      summary: Get user by ID
      description: Retrieve user by ID
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags: [User Management]
      summary: Update user profile
      description: Update user profile by ID
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /users/role/{role}:
    get:
      tags: [User Management]
      summary: Get users by role
      description: Retrieve users by role
      parameters:
        - in: path
          name: role
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"

  /validate-user:
    post:
      tags: [Validation]
      summary: Validate user data
      description: Validate user data (e.g., email, mobile)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "test@example.com"
                mobile:
                  type: string
                  example: "12345678"
      responses:
        "200":
          description: Validation successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User data is valid"
        "400":
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT token obtained from the login endpoint.
        Include the token in the Authorization header as: `Bearer <token>`

  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 123
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        mobile:
          type: string
          example: "12345678"
        password:
          type: string
          example: "SecurePassword123"
        full_name:
          type: string
          example: "John Doe"
        bio:
          type: string
          example: "Software Developer"
        is_active:
          type: boolean
          example: true
        is_admin:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00.000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-08-07T14:45:00.000Z"
        last_login:
          type: string
          format: date-time
          example: "2025-08-07T09:15:00.000Z"

    UserRegister:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 50
          example: "Jane Smith"
        email:
          type: string
          format: email
          example: "jane.smith@example.com"
        mobile:
          type: string
          example: "12345678"
        password:
          type: string
          minLength: 6
          example: "SecurePassword789"

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "jane.smith@example.com"
        password:
          type: string
          example: "SecurePassword789"

    Token:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type:
          type: string
          example: "bearer"
        expires_in:
          type: integer
          example: 1800

    Error:
      type: object
      properties:
        error:
          type: string
          example: "Invalid credentials"
        message:
          type: string
          example: "The provided username or password is incorrect"
        timestamp:
          type: string
          format: date-time
          example: "2025-08-07T10:30:00.000Z"
        path:
          type: string
          example: "/auth/login"

    BlockUserRequest:
      type: object
      required:
        - reason
      properties:
        reason:
          type: string
          example: "Violation of terms"

    UserStatusResponse:
      type: object
      properties:
        id:
          type: integer
          example: 123
        status:
          type: string
          enum: [active, blocked, suspended]
          example: "blocked"
        reason:
          type: string
          example: "Violation of terms"
        updated_at:
          type: string
          format: date-time
          example: "2025-08-07T14:45:00.000Z"

    AdminCreateUserRequest:
      type: object
      required:
        - email
        - password
        - role
      properties:
        email:
          type: string
          format: email
          example: "admin@example.com"
        password:
          type: string
          minLength: 6
          example: "SecureAdminPassword789"
        role:
          type: string
          enum: [admin, user]
          example: "admin"

    AdminCreateUserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 123
        email:
          type: string
          format: email
          example: "admin@example.com"
        role:
          type: string
          enum: [admin, user]
          example: "admin"
        created_at:
          type: string
          format: date-time
          example: "2025-01-15T10:30:00.000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-08-07T14:45:00.000Z"

    UserStatsResponse:
      type: object
      properties:
        total_users:
          type: integer
          example: 150
        active_users:
          type: integer
          example: 120
        blocked_users:
          type: integer
          example: 20
        suspended_users:
          type: integer
          example: 10
        new_users_today:
          type: integer
          example: 5
        user_growth_rate:
          type: number
          format: float
          example: 1.5

  examples:
    UserRegistration:
      summary: User registration example
      value:
        username: "jane_smith"
        email: "jane.smith@example.com"
        password: "SecurePassword789"
        full_name: "Jane Smith"

    UserLogin:
      summary: User login example
      value:
        username: "jane_smith"
        password: "SecurePassword789"

    TokenValidation:
      summary: Token validation example
      value:
        token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

security:
  - bearerAuth: []
